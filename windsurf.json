{
  "version": 1,
  "rules": [
    {
      "name": "Load Project Context",
      "description": "Load Englishing project context for every new chat session",
      "condition": {
        "type": "always"
      },
      "action": {
        "type": "prepend_text",
        "text": "# Englishing Project Context\n\n## Project Architecture\n\nThe Englishing project has a modular structure with several key components:\n\n1. Core Modules:\n   - User Module (users, user_profiles)\n   - Article Module (courses, articles)\n\n2. Article Extensions:\n   - Article Word Module (sets, lists, translations)\n   - Article Sentence Module (sets, lists, translations)\n   - Article Double Sentence Module (sets, lists, translations)\n   - Article Expression Module (sets, lists, translations)\n   - Article Conversation Module (conversations, messages, translations)\n\n3. Standalone Modules:\n   - Word Module (words, meanings, pronunciations, translations, transliterations, connections)\n   - Sentence Module (sentences, pronunciations, translations, transliterations)\n   - Expression Module (expressions, meanings, pronunciations, translations, transliterations, connections)\n\n## Word Module Structure\n\nThe Word module is implemented using internachi/modular with the following structure:\n\n1. Models:\n   - Word - has many meanings, has one pronunciation\n   - WordMeaning - belongs to word, has one translation\n   - WordPronunciation - belongs to word\n   - WordMeaningTranslation - belongs to word meaning, has one transliteration\n   - WordMeaningTransliteration - belongs to word meaning translation\n   - WordConnection - pivot table connecting words (synonyms, antonyms)\n\n2. Key relationships:\n   - A word can have multiple meanings\n   - A word has only one pronunciation\n   - A meaning can have only one translation\n   - A translation can have only one transliteration\n   - Word connections use a pivot table with word_id_1, word_id_2, and type (string)\n\n3. Database tables:\n   - words(id, word, slug)\n   - word_meanings(id, word_id, meaning, slug)\n   - word_pronunciations(id, word_id, bn_pronunciation, hi_pronunciation, es_pronunciation)\n   - word_meaning_translations(id, word_meaning_id, bn_meaning, hi_meaning, es_meaning)\n   - word_meaning_transliterations(id, word_meaning_translation_id, bn_transliteration, hi_transliteration, es_transliteration)\n   - word_connections(id, word_id_1, word_id_2, type)\n\n## Design Patterns\n\n- Spatie Translatable used for JSON fields that need translation\n- One-to-many relationships between parent and child entities\n- Unique constraints to ensure only one translation per locale\n- Consistent naming conventions across modules\n- Strings used instead of enums in the database\n- Volt components (single-file Livewire components) preferred over regular Livewire components\n\n## UI Implementation\n\n- Frontend built with Tailwind CSS\n- Dark mode implemented across the application\n- Livewire used for reactive components\n- Alpine.js used for frontend interactivity\n- DataTables used for data display with server-side processing\n- Noto Sans Bengali font used for better Bangla character support\n- Ace Editor used for JSON editing with custom configurations\n\n## JSON Editor Component\n\n- Custom component for editing JSON data with syntax highlighting\n- Features toggle between Ace editor and regular textarea for better Bangla text input\n- Supports JSON validation and formatting\n- Includes toolbar with format button, vim mode toggle, and editor/textarea toggle\n- Default empty structures for new words include:\n  - Empty pronunciations for 'bn' and 'hi' locales\n  - Empty meaning template with translations\n  - Empty standalone translations\n- Font family set to Noto Sans Bengali for better Bangla character support\n\n## Recent Changes\n\n- Added dark mode support to the entire application\n- Implemented theme toggle in the navigation bar\n- Updated Word Show and Index pages with dark mode styling\n- Fixed DataTable styling in dark mode using custom initialization\n- Added Livewire styles and scripts to the layout file\n- Enhanced JSON editor with textarea toggle for better Bangla text input\n- Updated Word Edit JSON component to include empty structures for new words\n\nPlease use this context to assist me with the Englishing project."
      }
    },
    {
      "name": "Load Project Files",
      "description": "Automatically load key project files",
      "condition": {
        "type": "always"
      },
      "action": {
        "type": "execute_commands",
        "commands": [
          "find /Users/polodev/sites/englishing/app-modules -name \"*.php\" | grep -E \"Word|Model\" | head -n 5"
        ]
      }
    },
    {
      "name": "Dark Mode Development",
      "description": "Provide context about dark mode implementation when discussing UI changes",
      "condition": {
        "type": "message_contains",
        "value": ["dark mode", "theme", "styling", "UI", "tailwind"]
      },
      "action": {
        "type": "prepend_text",
        "text": "Note about dark mode implementation in Englishing:\n\nDark mode is implemented using Tailwind CSS dark variant classes and Alpine.js for state management. The dark mode state is stored in localStorage as 'color-theme' and toggled via a button in the topnav component. All components should use dark: variants for consistent styling across the application."
      }
    },
    {
      "name": "Database Structure",
      "description": "Provide detailed database structure when discussing database-related topics",
      "condition": {
        "type": "message_contains",
        "value": ["database", "schema", "table", "model", "migration", "relation"]
      },
      "action": {
        "type": "prepend_text",
        "text": "# Englishing Database Structure\n\n## Words Module\n```\nwords(id, word, slug, pronunciation, phonetic, part_of_speech, source)   # pronunciation uses Spatie Translatable\nword_meanings(id, word_id, meaning, slug, display_order, source)\nword_meaning_translations(id, word_meaning_id, locale, translation, transliteration, slug)\nword_connections(id, word_id_1, word_id_2, type)   # type is a string: 'synonym', 'antonym', etc.\nword_translations(id, word_id, meaning_id, locale, translation, transliteration, slug)  # meaning_id can be null for standalone translations\n```"
      }
    },
    {
      "name": "Livewire and Volt Components",
      "description": "Provide context about Livewire and Volt components when discussing UI components",
      "condition": {
        "type": "message_contains",
        "value": ["livewire", "volt", "component", "blade", "alpine"]
      },
      "action": {
        "type": "prepend_text",
        "text": "# Livewire and Volt Components in Englishing\n\nThe project uses Livewire for reactive components with a preference for Volt components (single-file components) over regular Livewire components. Volt components have both the PHP class and Blade template in a single file, making them easier to manage.\n\nKey components include:\n- JSON Editor: A custom component for editing JSON data with syntax highlighting and validation\n- Word Edit Using JSON: A Volt component for editing word data using JSON format\n- Theme Toggle: A component for switching between light and dark mode\n\nWhen making changes to Livewire components, maintain the Volt format and don't split them into separate class and view files."
      }
    },
    {
      "name": "JSON Editor Component",
      "description": "Provide details about the JSON editor component when discussing JSON editing",
      "condition": {
        "type": "message_contains",
        "value": ["json", "editor", "ace", "textarea", "bangla", "bengali"]
      },
      "action": {
        "type": "prepend_text",
        "text": "# JSON Editor Component\n\nThe JSON Editor component is a custom component that provides:\n\n1. Ace Editor Integration:\n   - Syntax highlighting for JSON\n   - JSON validation and formatting\n   - Vim mode toggle\n   - Custom font (Noto Sans Bengali) for better Bangla support\n\n2. Textarea Toggle:\n   - Button to switch between Ace editor and regular textarea\n   - Textarea mode for better Bangla text input\n   - Same validation and formatting capabilities in both modes\n\n3. Default Empty Structures:\n   - Empty pronunciations for 'bn' and 'hi' locales\n   - Empty meaning template with translations\n   - Empty standalone translations\n\nThe component is used primarily in the Word Edit Using JSON component to provide a user-friendly way to edit word data in JSON format."
      }
    }
  ]
}
